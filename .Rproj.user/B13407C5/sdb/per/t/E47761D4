{
    "collab_server" : "",
    "contents" : "#################################################################################\n# Test the file GeneticAlgorithm.R\n#################################################################################\nsource(\"~/GA/R/utils.R\")\nsource(\"~/GA/R/select.R\")\n\n####################################\n############# unit test ############\n####################################\nfake_data <- function(c, n, beta_0, beta, sigma){\n  # c: number of variables c = 10\n  # n: total number of observations\n  X <- matrix(rep(round(runif(c, min = 1, max = 10)),n) +\n                rnorm(c*n, mean = 0, sd = 0.2), nrow = n, byrow = T)\n  Xnames <- paste0(\"X\", 1:c)\n  Xdata <- as.data.frame(X)\n  colnames(Xdata) <- Xnames\n  Y <- rowSums(t(beta*t(X))) + beta_0 + rnorm(n, mean = 0, sd = sigma)\n  return(cbind(Xdata, Y))\n}\n\ntest_data <- fake_data(10, 50, 1,\n                       sample(c(round(runif(10/2, min = 2, max = 10)), rep(0,5)), replace = F), 1)\n\n\n####### unit test for init() #############\ncontext(\"Test Init() function\")\n\n\n# something wrong with this one(input)\ntest_that(\"Input <df> is a matrix\",{\n#  expect_failure(init(matrix(1:55,5,11),15,10),\"input data is matrix\")\n})\n\ntest_that(\"Repeated initialization does not return the same chromosomes\",{\n  init1 <- init(test_data, 15, 10)\n  init2 <- init(test_data, 15, 10)\n  expect_false(identical(init1,init2))\n})\n\ntest_that(\"Output is a data.frame\", {\n  init3 <- init(test_data, 15, 10)\n  expect_equal(class(init3),\"data.frame\")\n})\n\n\n############ unit test for training() ################\ncontext(\"Test training() function\")\n\n\ntest_that(\"Input errors\", {\n  init4 <- init(test_data, 15, 10)\n  shabi <- 8\n#  expect_error(training(init4,gaussian,test_data,AIC), \"input <method> is not a lm/glm\")\n#  expect_error(training(init4,lm,matrix(1:55,5,11),AIC), \"input <X> is not a data.frame\")\n#  expect_error(training(init4,lm,test_data,shabi), \"input <fitness_function> is not a function\")\n})\n\ntest_that(\"output is a vector of fitness values\", {\n  init5 <- init(test_data, 15, 10)\n  train1 <- training(init5, lm, test_data,AIC)\n  expect_equal(class(train1), \"numeric\")\n  expect_gt(length(train1), 0)\n})\n\ntest_that(\"Algorithm works for both lm/glm\",{\n  init5 <- init(test_data, 15, 10)\n  train1 <- training(init5, lm, test_data,AIC)\n  train2 <- training(init5, glm,family= gaussian, test_data,AIC)\n  expect_equal(class(train1), \"numeric\")\n  expect_equal(class(train2), \"numeric\")\n})\n\ntest_that(\"Algorithm works for both AIC/BIC\",{\n  init5 <- init(test_data, 15, 10)\n  train1 <- training(init5, lm, test_data,AIC)\n  train2 <- training(init5, lm, test_data,BIC)\n  expect_equal(class(train1), \"numeric\")\n  expect_equal(class(train2), \"numeric\")\n})\n\n\n############ unit test for select_parents() ###########\ncontext(\"Test select_parents() function\")\n\ntest_that(\"Input errors\", {\n  init6 <- init(test_data, 15, 10)\n  train6 <- training(init6, lm, test_data,AIC)\n#  expect_error(select_parents( mechanism=\"rank\", random=T, 15, 10),\n#               'argument \"c\" is missing, with no default')\n#  expect_error(select_parents(train6, mechanism= 12, random=T, 15, 10),\n#               \"mechanism is not 'rank' or 'tournament' \")\n#  expect_error(select_parents(train6, mechanism=\"rank\", random=\"lol\", 15, 10),\n#               \"random is not a logical\")\n#  expect_error(select_parents(train6, mechanism=\"rank\", random=T, \"\", 10),\n#               \"non-numeric argument to binary operator\")\n#  expect_error(select_parents(train6, mechanism=\"rank\", random=T, 15, \"axiba\"),\n#               \"c is not a numeric\")\n})\n\ntest_that(\"number of pairs of parents is ceiling(P/2)\", {\n  init6 <- init(test_data, 15, 10)\n  train6 <- training(init6, lm, test_data,AIC)\n  parent6 <- select_parents(train6, mechanism=\"rank\", random=T, 15, 10)\n  expect_equal(nrow(parent6), ceiling(15/2))\n})\n\ntest_that(\"everytime select_parents() will produce different parent pairs\", {\n  init6 <- init(test_data, 15, 10)\n  train6 <- training(init6, lm, test_data,AIC)\n  parent60 <- select_parents(train6, mechanism=\"rank\", random=T, 15, 10)\n  parent61 <- select_parents(train6, mechanism=\"rank\", random=T, 15, 10)\n  expect_false(identical(parent60, parent61))\n})\n\ntest_that(\"difference in mechanism result in same size of parents\", {\n  init6 <- init(test_data, 15, 10)\n  train6 <- training(init6, lm, test_data,AIC)\n  parent60 <- select_parents(train6, mechanism=\"rank\", random=T, 15, 10)\n  parent61 <- select_parents(train6, mechanism=\"mechanism\", random=T, 15, 10)\n  expect_true(identical(dim(parent60), dim(parent61)))\n})\n\n########### unit test for breed() function ##########\ncontext(\"Test breed() function\")\n\n\ntest_that(\"Input Errors\", {\n  init7 <- init(test_data, 15, 10)\n  train7 <- training(init7, lm, test_data,AIC)\n  parent7 <- select_parents(train7, mechanism=\"rank\", random=T, 15, 10)\n#  expect_error(breed(P=15, c=10, parent7, mu=0.5,\n#                     crossover_points=3, train7, Gap=1/2),\"invalid 'times' argument\")\n  expect_error(breed(init7,P=15, c=10 , mu=0.5,\n                     crossover_points=3, train7, Gap=1/2), \"invalid 'times' argument\")\n#  expect_error(breed(init7,P=15, c=10, parent7, mu=0.5,\n#                     crossover_points=3, train7, Gap=TRUE), \"input should be data.frame or numeric\")\n})\n\ntest_that(\"output is a data.frame with dimension(P,c)\", {\n  init7 <- init(test_data, 15, 10)\n  train7 <- training(init7, lm, test_data,AIC)\n  parent7 <- select_parents(train7, mechanism=\"rank\", random=T, 15, 10)\n  next_gen7 <- breed(init7,P=15, c=10, parent7, mu=0.5, crossover_points=3,\n                     train7, Gap=1/2)\n  expect_equal(class(next_gen7), \"data.frame\")\n  expect_equal(nrow(next_gen7), 15)\n  expect_equal(ncol(next_gen7), 10)\n})\n\ntest_that(\"everytime repeated crossover and mutation will produce different new generations\", {\n  init7 <- init(test_data, 15, 10)\n  train7 <- training(init7, lm, test_data,AIC)\n  parent7 <- select_parents(train7, mechanism=\"rank\", random=T, 15, 10)\n  next_gen70 <- breed(init7,P=15, c=10, parent7, mu=0.5, crossover_points=3,\n                      train7, Gap=1/2)\n  next_gen71 <- breed(init7,P=15, c=10, parent7, mu=0.5, crossover_points=3,\n                      train7, Gap=1/2)\n  expect_false(identical(next_gen70, next_gen71))\n})\n\n\ntest_that(\"generation gap must follow '0< Gap <=1' \", {\n  init7 <- init(test_data, 15, 10)\n  train7 <- training(init7, lm, test_data,AIC)\n  parent7 <- select_parents(train7, mechanism=\"rank\", random=T, 15, 10)\n#  g.gap <- 0\n#  next_gen70 <- breed(init7,P=15, c=10, parent7, mu=0.5, crossover_points=3,\n#                      train7, Gap=g.gap)\n  next_gen71 <- breed(init7,P=15, c=10, parent7, mu=0.5, crossover_points=3,\n                      train7, Gap=1/2)\n#  g.gap <- 1.5\n#  next_gen72 <- breed(init7,P=15, c=10, parent7, mu=0.5, crossover_points=3,\n#                      train7, Gap=g.gap)\n#  expect_gt(g.gap, 0)\n  expect_equal(nrow(next_gen71), 15)\n  expect_equal(ncol(next_gen71), 10)\n#  expect_lte(g.gap, 1)\n})\n\n########### unit test for get_model() function ##########\ncontext(\"Test get_model() function\")\ntest_that(\"output is of the same class as the training method\", {\n  init8 <- init(test_data, 15, 10)\n  train8 <- training(init8, lm, test_data,AIC)\n  parent8 <- select_parents(train8, mechanism=\"rank\", random=T, 15, 10)\n  next_gen8 <- breed(init8,P=15, c=10, parent8, mu=0.5, crossover_points=3,\n                     train8, Gap=1/2)\n  new_candidate8 <- get_model(next_gen8, train8, lm, test_data)\n  expect_identical(class(new_candidate8), \"lm\")\n})\n\n######### integration test for select() function ###########\ncontext(\"Integration test for select() function\")\ntest_that(\"Input errors\", {\n  expect_error(select(P=5, max_iter=100, method_text=\"lm\", fitness_function_text=\"AIC\", mu=0.1,\n                      crossover_points=3, mechanism=\"rank\" , random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"df\" is missing, with no default')\n  expect_error(select(test_data, max_iter=100, method_text=\"lm\", fitness_function_text=\"AIC\", mu=0.1,\n                      crossover_points=3, mechanism=\"rank\" , random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"P\" is missing, with no default')\n  expect_error(select(test_data, P=5,  method_text=\"lm\", fitness_function_text=\"AIC\", mu=0.1,\n                      crossover_points=3, mechanism=\"rank\" , random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"max_iter\" is missing, with no default')\n  expect_error(select(test_data, P=5,  max_iter=100,  fitness_function_text=\"AIC\", mu=0.1,\n                      crossover_points=3, mechanism=\"rank\" , random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"method_text\" is missing, with no default')\n  expect_error(select(test_data, P=5,  max_iter=100,  method_text=\"lm\", mu=0.1,\n                      crossover_points=3, mechanism=\"rank\" , random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"fitness_function_text\" is missing, with no default')\n  expect_error(select(test_data, P=5,  max_iter=100,  method_text=\"lm\", fitness_function_text=\"AIC\",\n                      crossover_points=3, mechanism=\"rank\" , random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"mu\" is missing, with no default')\n  expect_error(select(test_data, P=5,  max_iter=100,  method_text=\"lm\", fitness_function_text=\"AIC\",\n                      mu=0.1, mechanism=\"rank\" , random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"crossover_points\" is missing, with no default')\n  expect_error(select(test_data, P=5,  max_iter=100,  method_text=\"lm\", fitness_function_text=\"AIC\",\n                      mu=0.1, crossover_points=3, random = TRUE, Gap = 1/4, plot.return = FALSE),\n               'argument \"mechanism\" is missing, with no default')\n})\n\ntest_that(\"Check Output object is a list\", {\n  result1 <- select(test_data, 5, 300, \"lm\", \"AIC\", 0.1, 3, mechanism = \"rank\",\n                    random = FALSE, Gap = 1/4, plot.return = F)\n  expect_true(class(result1) == \"list\")\n})\n\ntest_that(\"Check that in some case, maximum number of iterations is useful\",{\n  result1 <- select(test_data, 15, 100, \"lm\", \"AIC\", 0.1, 3, mechanism = \"rank\",\n                    random = FALSE, Gap = 1/4, plot.return = F)\n  expect_true(result1$count ==100)\n})\n\ntest_that(\"With different mechanism, out algorithm converge to same result with different number of iterations\",{\n  result11 <- select(test_data, 5, 300, \"lm\", \"BIC\", 0.1, 3, mechanism = \"rank\",\n                     random = FALSE, Gap = 1/4, plot.return = F)\n  result12 <- select(test_data, 5, 300, \"lm\", \"AIC\", 0.1, 3, mechanism = \"rank\",\n                     random = FALSE, Gap = 1/4, plot.return = F)\n\n  expect_false(result12$count == result11$count)\n  print(result11$model)\n  print(result12$model)\n})\n\ntest_that(\"when mechanism is 'rank', set 'random=FALSE' may make the convergence faster \", {\n#  result11 <-  select(test_data, 15, 300, \"lm\", \"AIC\", 0.1, 3, mechanism = \"rank\",\n#                      random = FALSE, Gap = 1/4, plot.return = F)\n#  result12 <-  select(test_data, 15, 300, \"lm\", \"AIC\", 0.1, 3, mechanism = \"rank\",\n#                      random = TRUE, Gap = 1/4, plot.return = F)\n#  expect_lte(result11$count, result12$count)\n})\n",
    "created" : 1512949616901.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2331619578",
    "id" : "E47761D4",
    "lastKnownWriteTime" : 1513165376,
    "last_content_update" : 1513165376286,
    "path" : "~/GA/tests/testthat/test-GeneticAlgorithm.R",
    "project_path" : "tests/testthat/test-GeneticAlgorithm.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}